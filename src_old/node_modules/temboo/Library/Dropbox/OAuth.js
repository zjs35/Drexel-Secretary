
var util = require("util");
var choreography = require("temboo/core/choreography");


/*
    FinalizeOAuth
    Completes the OAuth process by retrieving a Dropbox access token, after they have visited the authorization URL returned by the InitializeOAuth choreo and clicked "allow."
*/


var FinalizeOAuth = function(session) {
    /*
        Create a new instance of the FinalizeOAuth Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Dropbox/OAuth/FinalizeOAuth"
    FinalizeOAuth.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new FinalizeOAuthResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new FinalizeOAuthInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the FinalizeOAuth
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var FinalizeOAuthInputSet = function() {
    FinalizeOAuthInputSet.super_.call(this);
        /*
        Set the value of the AppKey input for this Choreo. ((required, string) The App Key provided by Dropbox after registering your application.)
        */
        this.set_AppKey = function(value) {
            this.setInput("AppKey", value);
        }

        /*
        Set the value of the AppSecret input for this Choreo. ((required, string) The App Secret provided by Dropbox after registering your application.)
        */
        this.set_AppSecret = function(value) {
            this.setInput("AppSecret", value);
        }

        /*
        Set the value of the CallbackID input for this Choreo. ((required, string) The callback token returned by the InitializeOAuth Choreo. Used to retrieve the callback data after the user authorizes.)
        */
        this.set_CallbackID = function(value) {
            this.setInput("CallbackID", value);
        }

        /*
        Set the value of the DropboxAppKey input for this Choreo. ((required, string) Deprecated (retained for backward compatibility only).)
        */
        this.set_DropboxAppKey = function(value) {
            this.setInput("DropboxAppKey", value);
        }

        /*
        Set the value of the DropboxAppSecret input for this Choreo. ((required, string) Deprecated (retained for backward compatibility only).)
        */
        this.set_DropboxAppSecret = function(value) {
            this.setInput("DropboxAppSecret", value);
        }

        /*
        Set the value of the OAuthTokenSecret input for this Choreo. ((required, string) Deprecated (retained for backward compatibility only).)
        */
        this.set_OAuthTokenSecret = function(value) {
            this.setInput("OAuthTokenSecret", value);
        }

        /*
        Set the value of the SuppressErrors input for this Choreo. ((optional, boolean) When set to true, errors received during the OAuth redirect process will be suppressed and returned in the ErrorMessage output.)
        */
        this.set_SuppressErrors = function(value) {
            this.setInput("SuppressErrors", value);
        }

        /*
        Set the value of the Timeout input for this Choreo. ((optional, integer) The amount of time (in seconds) to poll your Temboo callback URL to see if your app's user has allowed or denied the request for access. Defaults to 20. Max is 60.)
        */
        this.set_Timeout = function(value) {
            this.setInput("Timeout", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the FinalizeOAuth Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var FinalizeOAuthResultSet = function(resultStream) {
    FinalizeOAuthResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "AccessToken" output from this Choreo execution. ((string) The access token for the user that has granted access to your application.)
        */
        this.get_AccessToken = function() {
            return this.getResult("AccessToken");
        }
        /*
        Retrieve the value for the "AccessTokenSecret" output from this Choreo execution. ((string) Deprecated (retained for backward compatibility only).)
        */
        this.get_AccessTokenSecret = function() {
            return this.getResult("AccessTokenSecret");
        }
        /*
        Retrieve the value for the "AccountID" output from this Choreo execution. ((string) The user's account identifier.)
        */
        this.get_AccountID = function() {
            return this.getResult("AccountID");
        }
        /*
        Retrieve the value for the "ErrorMessage" output from this Choreo execution. ((string) Contains an error message if an error occurs during the OAuth redirect process and if SuppressErrors is set to true.)
        */
        this.get_ErrorMessage = function() {
            return this.getResult("ErrorMessage");
        }
        /*
        Retrieve the value for the "UserID" output from this Choreo execution. ((integer) Deprecated (retained for backward compatibility only).)
        */
        this.get_UserID = function() {
            return this.getResult("UserID");
        }
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((json) The response from Dropbox.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(FinalizeOAuth, choreography.Choreography);
util.inherits(FinalizeOAuthInputSet, choreography.InputSet);
util.inherits(FinalizeOAuthResultSet, choreography.ResultSet);
exports.FinalizeOAuth = FinalizeOAuth;


/*
    FromOAuth1
    Creates an OAuth 2.0 access token from the supplied OAuth 1.0 access token.
*/


var FromOAuth1 = function(session) {
    /*
        Create a new instance of the FromOAuth1 Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Dropbox/OAuth/FromOAuth1"
    FromOAuth1.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new FromOAuth1ResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new FromOAuth1InputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the FromOAuth1
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var FromOAuth1InputSet = function() {
    FromOAuth1InputSet.super_.call(this);
        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) An OAuth 1.0 access token for a specific Dropbox user.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

        /*
        Set the value of the AccessTokenSecret input for this Choreo. ((required, string) An OAuth 1.0 access token secret for a specific Dropbox user.)
        */
        this.set_AccessTokenSecret = function(value) {
            this.setInput("AccessTokenSecret", value);
        }

        /*
        Set the value of the AppKey input for this Choreo. ((required, string) The App Key provided by Dropbox after registering your application.)
        */
        this.set_AppKey = function(value) {
            this.setInput("AppKey", value);
        }

        /*
        Set the value of the AppSecret input for this Choreo. ((required, string) The App Secret provided by Dropbox after registering your application.)
        */
        this.set_AppSecret = function(value) {
            this.setInput("AppSecret", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the FromOAuth1 Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var FromOAuth1ResultSet = function(resultStream) {
    FromOAuth1ResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "OAuth2AccessToken" output from this Choreo execution. ((string) The OAuth 2.0 access for a specific Dropbox user.)
        */
        this.get_OAuth2AccessToken = function() {
            return this.getResult("OAuth2AccessToken");
        }
}

util.inherits(FromOAuth1, choreography.Choreography);
util.inherits(FromOAuth1InputSet, choreography.InputSet);
util.inherits(FromOAuth1ResultSet, choreography.ResultSet);
exports.FromOAuth1 = FromOAuth1;


/*
    InitializeOAuth
    Generates an authorization URL that an application can use to complete the first step in the OAuth process.
*/


var InitializeOAuth = function(session) {
    /*
        Create a new instance of the InitializeOAuth Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Dropbox/OAuth/InitializeOAuth"
    InitializeOAuth.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new InitializeOAuthResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new InitializeOAuthInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the InitializeOAuth
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var InitializeOAuthInputSet = function() {
    InitializeOAuthInputSet.super_.call(this);
        /*
        Set the value of the AppKey input for this Choreo. ((required, string) The App Key provided by Dropbox after registering your application.)
        */
        this.set_AppKey = function(value) {
            this.setInput("AppKey", value);
        }

        /*
        Set the value of the CustomCallbackID input for this Choreo. ((optional, string) A unique identifier that you can pass to eliminate the need to wait for a Temboo generated CallbackID. Callback identifiers may only contain numbers, letters, periods, and hyphens.)
        */
        this.set_CustomCallbackID = function(value) {
            this.setInput("CustomCallbackID", value);
        }

        /*
        Set the value of the DropboxAppKey input for this Choreo. ((required, string) Deprecated (retained for backward compatibility only).)
        */
        this.set_DropboxAppKey = function(value) {
            this.setInput("DropboxAppKey", value);
        }

        /*
        Set the value of the DropboxAppSecret input for this Choreo. ((required, string) Deprecated (retained for backward compatibility only).)
        */
        this.set_DropboxAppSecret = function(value) {
            this.setInput("DropboxAppSecret", value);
        }

        /*
        Set the value of the ForwardingURL input for this Choreo. ((optional, string) The URL that Temboo will redirect your users to after they grant access to your application. This should include the "https://" or "http://" prefix and be a fully qualified URL.)
        */
        this.set_ForwardingURL = function(value) {
            this.setInput("ForwardingURL", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the InitializeOAuth Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var InitializeOAuthResultSet = function(resultStream) {
    InitializeOAuthResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "AuthorizationURL" output from this Choreo execution. ((string) The authorization URL that the application's user needs to go to in order to grant access to your application.)
        */
        this.get_AuthorizationURL = function() {
            return this.getResult("AuthorizationURL");
        }
        /*
        Retrieve the value for the "CallbackID" output from this Choreo execution. ((string) An ID used to retrieve the callback data that Temboo stores once your application's user authorizes.)
        */
        this.get_CallbackID = function() {
            return this.getResult("CallbackID");
        }
        /*
        Retrieve the value for the "OAuthTokenSecret" output from this Choreo execution. ((string) Deprecated (retained for backward compatibility only).)
        */
        this.get_OAuthTokenSecret = function() {
            return this.getResult("OAuthTokenSecret");
        }
}

util.inherits(InitializeOAuth, choreography.Choreography);
util.inherits(InitializeOAuthInputSet, choreography.InputSet);
util.inherits(InitializeOAuthResultSet, choreography.ResultSet);
exports.InitializeOAuth = InitializeOAuth;


/*
    Revoke
    Disables the access token used to authenticate the call.
*/


var Revoke = function(session) {
    /*
        Create a new instance of the Revoke Choreo. A TembooSession object, containing a valid
        set of Temboo credentials, must be supplied.
	*/
    var location = "/Library/Dropbox/OAuth/Revoke"
    Revoke.super_.call(this, session, location);

    /*
    Define a callback that will be used to appropriately format the results of this Choreo.
    */
    var newResultSet = function(resultStream) {
        return new RevokeResultSet(resultStream);
    }

	/*
	Obtain a new InputSet object, used to specify the input values for an execution of this Choreo.
	*/
    this.newInputSet = function() {
        return new RevokeInputSet();
    }
    
	/*
	Execute this Choreo with the specified inputs, calling the specified callback upon success,
	and the specified errorCallback upon error.
	*/
    this.execute = function(inputs, callback, errorCallback) {
        this._execute(inputs, newResultSet, callback, errorCallback);
    }
}


/*
An InputSet with methods appropriate for specifying the inputs to the Revoke
Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
*/

var RevokeInputSet = function() {
    RevokeInputSet.super_.call(this);
        /*
        Set the value of the AccessToken input for this Choreo. ((required, string) The access token for a specific Dropbox user.)
        */
        this.set_AccessToken = function(value) {
            this.setInput("AccessToken", value);
        }

}

/*
A ResultSet with methods tailored to the values returned by the Revoke Choreo.
The ResultSet object is used to retrieve the results of a Choreo execution.
*/

var RevokeResultSet = function(resultStream) {
    RevokeResultSet.super_.call(this, resultStream);    
        /*
        Retrieve the value for the "Response" output from this Choreo execution. ((json) The response from Dropbox.)
        */
        this.get_Response = function() {
            return this.getResult("Response");
        }
}

util.inherits(Revoke, choreography.Choreography);
util.inherits(RevokeInputSet, choreography.InputSet);
util.inherits(RevokeResultSet, choreography.ResultSet);
exports.Revoke = Revoke;

